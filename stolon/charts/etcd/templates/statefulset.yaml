apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    component: "{{.Release.Name}}-{{.Values.Component}}"
spec:
  serviceName: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"
  replicas: {{default 3 .Values.Replicas}}
  template:
    metadata:
      name: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}-{{.Chart.Version}}"
        component: "{{.Release.Name}}-{{.Values.Component}}"
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
    spec:
      containers:
      - name: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"
        image: "{{.Values.Image}}:{{.Values.ImageTag}}"
        imagePullPolicy: "{{.Values.ImagePullPolicy}}"
        ports:
        - containerPort: {{.Values.PeerPort}}
          name: peer
        - containerPort: {{.Values.ClientPort}}
          name: client
        resources:
          requests:
            cpu: "{{.Values.Cpu}}"
            memory: "{{.Values.Memory}}"
        env:
        - name: INITIAL_CLUSTER_SIZE
          value: {{default 3 .Values.Replicas | quote }}
        - name: PETSET_NAME
          value: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"
        volumeMounts:
        - name: datadir
          mountPath: /var/run/etcd
        resources:
{{ toYaml .Values.resources | indent 10 }}
        lifecycle:
          preStop:
            exec:
              command:
                - "/bin/sh"
                - "-ec"
                - |
                  EPS=""
                  for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                      EPS="${EPS}${EPS:+,}http://${PETSET_NAME}-${i}.${PETSET_NAME}:2379"
                  done

                  HOSTNAME=$(hostname)

                  member_hash() {
                      etcdctl member list | grep http://${HOSTNAME}.${PETSET_NAME}:2380 | cut -d':' -f1 | cut -d'[' -f1
                  }

                  echo "Removing ${HOSTNAME} from etcd cluster"
                  #echo "Removing ${HOSTNAME} from etcd cluster" > /var/run/etcd/stopping.log
                  echo "NOT Removing ${HOSTNAME} from etcd cluster" > /var/run/etcd/stopping.log
                  echo "ETCDCTL_ENDPOINT=${EPS}" > /var/run/etcd/stopping.log
                  
                  #ETCDCTL_ENDPOINT=${EPS} etcdctl member remove $(member_hash)
                  #if [ $? -eq 0 ]; then
                      # Remove everything otherwise the cluster will no longer scale-up
                  #    rm -rf /var/run/etcd/*
                  #    echo "Removed ${HOSTNAME} from etcd cluster and deleted directory contents." > /var/run/etcd/stopping.log
                  #fi
        command:
          - "/bin/sh"
          - "-ec"
          - |
            HOSTNAME=$(hostname)

            # store member id into PVC for later member replacement
            collect_member() {
                echo "collecting members ..."
                while ! etcdctl member list &>/dev/null; do sleep 1; done
                etcdctl member list | grep http://${HOSTNAME}.${PETSET_NAME}:2380 | cut -d':' -f1 | cut -d'[' -f1 > /var/run/etcd/member_id
                echo "member_id (collected): "
                cat /var/run/etcd/member_id
                echo "Datadir contents:"
                ls -al /var/run/etcd
                exit 0
            }
 
            EPS=""
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
              EPS="${EPS}${EPS:+,}http://${PETSET_NAME}-${i}.${PETSET_NAME}:2379"
            done
            echo "EPS=${EPS}"
            
            member_hash() {
                # getting member hash for this address from "member list"
                etcdctl member list | grep http://${HOSTNAME}.${PETSET_NAME}:2380 | cut -d':' -f1 | cut -d'[' -f1
            }

            wait_for_datadir() {
                set +e
                while true; do
                    echo "waiting for data-dir ..."
                    DATA_DIR_AVAIL=$(df |grep /var/run/etcd$)
                    if [ -n "${DATA_DIR_AVAIL}" ]; then
                        break
                    fi                    
                    sleep 1s
                done
                echo "data-dir is now available."
                set -e
            }
            
            wait_for_datadir
            
            echo "Datadir contents:"
            ls -al /var/run/etcd
            
            # re-joining after failure?
            if [ -e /var/run/etcd/default.etcd ]; then
                echo "Re-joining etcd member"
                # TODO: what to do, when /var/run/etcd/member_id does not exist? Maybe delete /var/run/etcd/* like in a removal / stop ? see above.
                set +e
                member_id=$(cat /var/run/etcd/member_id)
                set -e
                
                if [ ! -n "${member_id}" ]; then
                  echo "getting member_id from member_hash"
                  member_id=$(member_hash)
                fi
                
                if [ ! -n "${member_id}" ]; then
                  echo "ERROR: Can't get member_id. NOT re-joining."
                  # Remove everything otherwise the cluster will no longer scale-up
                  rm -rf /var/run/etcd/*                  
                else
                  echo "member id (re-join): ${member_id}"
                  # re-join member
                  echo "re-joining: getting ETCDCTL_ENDPOINT."
                  echo "ETCDCTL_ENDPOINT=${EPS}"
                  set e+
                  ETCDCTL_ENDPOINT=${EPS} etcdctl member update ${member_id} http://${HOSTNAME}.${PETSET_NAME}:2380
                  set e-
                  echo "Starting etcd"
                  exec etcd --name ${HOSTNAME} \
                      --listen-peer-urls http://${HOSTNAME}.${PETSET_NAME}:2380 \
                      --listen-client-urls http://${HOSTNAME}.${PETSET_NAME}:2379,http://127.0.0.1:2379 \
                      --advertise-client-urls http://${HOSTNAME}.${PETSET_NAME}:2379 \
                      --data-dir /var/run/etcd/default.etcd
                fi
                
            fi

            # etcd-PET_ID
            # TODO: PET_ID is not a number (instead it is ntrol-etcd-1)
            PET_ID=${HOSTNAME:5:${#HOSTNAME}}
            echo "PET_ID=${PET_ID} INITIAL_CLUSTER_SIZE=${INITIAL_CLUSTER_SIZE}"

            # adding a new member to existing cluster (assuming all initial pets are available)
            if [ "${PET_ID}" -ge ${INITIAL_CLUSTER_SIZE} ]; then
                export ETCDCTL_ENDPOINT=${EPS}

                # member already added?
                MEMBER_HASH=$(member_hash)
                if [ -n "${MEMBER_HASH}" ]; then
                    echo "MEMBER_HASH is not empty. Removing member. MEMBER_HASH=${MEMBER_HASH}"
                    # the member hash exists but for some reason etcd failed
                    # as the datadir has not be created, we can remove the member
                    # and retrieve new hash
                    etcdctl member remove ${MEMBER_HASH}
                fi

                echo "Adding new member"
                etcdctl member add ${HOSTNAME} http://${HOSTNAME}.${PETSET_NAME}:2380 | grep "^ETCD_" > /var/run/etcd/new_member_envs

                if [ $? -ne 0 ]; then
                    echo "Exiting"
                    rm -f /var/run/etcd/new_member_envs
                    exit 1
                fi

                cat /var/run/etcd/new_member_envs
                source /var/run/etcd/new_member_envs

                collect_member &

                echo "Starting etcd. with HOSTNAME: ${HOSTNAME}, PETSET_NAME: ${PETSET_NAME}"
                exec etcd --name ${HOSTNAME} \
                    --listen-peer-urls http://${HOSTNAME}.${PETSET_NAME}:2380 \
                    --listen-client-urls http://${HOSTNAME}.${PETSET_NAME}:2379,http://127.0.0.1:2379 \
                    --advertise-client-urls http://${HOSTNAME}.${PETSET_NAME}:2379 \
                    --data-dir /var/run/etcd/default.etcd \
                    --initial-advertise-peer-urls http://${HOSTNAME}.${PETSET_NAME}:2380 \
                    --initial-cluster ${ETCD_INITIAL_CLUSTER} \
                    --initial-cluster-state ${ETCD_INITIAL_CLUSTER_STATE}
            fi

            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                while true; do
                    echo "Waiting for ${PETSET_NAME}-${i}.${PETSET_NAME} to come up"
                    ping -W 1 -c 1 ${PETSET_NAME}-${i}.${PETSET_NAME} > /dev/null && break
                    sleep 1s
                done
            done

            PEERS=""
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                PEERS="${PEERS}${PEERS:+,}${PETSET_NAME}-${i}=http://${PETSET_NAME}-${i}.${PETSET_NAME}:2380"
            done

            collect_member &

            # join member
            echo "Starting etcd. with HOSTNAME: ${HOSTNAME}, PETSET_NAME: ${PETSET_NAME}, PEERS: ${PEERS}"
            exec etcd --name ${HOSTNAME} \
                --initial-advertise-peer-urls http://${HOSTNAME}.${PETSET_NAME}:2380 \
                --listen-peer-urls http://${HOSTNAME}.${PETSET_NAME}:2380 \
                --listen-client-urls http://${HOSTNAME}.${PETSET_NAME}:2379,http://127.0.0.1:2379 \
                --advertise-client-urls http://${HOSTNAME}.${PETSET_NAME}:2379 \
                --initial-cluster-token etcd-cluster-1 \
                --initial-cluster ${PEERS} \
                --initial-cluster-state new \
                --data-dir /var/run/etcd/default.etcd
{{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
          volume.{{ .Values.persistence.classVersion }}.kubernetes.io/storage-class: {{ .Values.persistence.class | quote }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
{{- else }}
      volumes:
        - name: datadir
          emptyDir: {}
{{- end }}
